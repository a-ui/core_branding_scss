@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'quarks.variables' as *;

/**
 * FUNCTIONS
 * -------------------------------------------------------------------
 * Collection of custom functions
 */

/**
 * STRIP UNIT FROM VALUE
 * -------------------------------------------------------------------
 */

@function strip-unit($number) {
  @if meta.type-of($number) == 'number' and not math.is-unitless($number) {
    @return math.div($number, $number * 0 + 1);
    // @return $number / ($number * 0 + 1);
  }

  @return $number;
}

/**
 * CONVERT PX TO REM
 * -------------------------------------------------------------------
 */

@function rem($_value) {
  @return #{calc(strip-unit($_value) / 16 * 1rem)};
}

/**
 * RAISE NUMBER TO CERTAIN POWER
 * -------------------------------------------------------------------
 */

@function power($number, $exponent) {
  $value: 1;

  @if $exponent > 0 {
    @for $i from 1 through $exponent {
      $value: $value * $number;
    }
  }

  @return $value;
}

/**
 * HANDLING Z-INDEX LAYERS
 * -------------------------------------------------------------------
 */

@function layer($layer) {
  @if not map.has-key($z-indexes, $layer) {
    @warn 'De laag `#{$layer}` zit niet in de $z-indexes map.';
  }

  @return map.get($z-indexes, $layer);
}
